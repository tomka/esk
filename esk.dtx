%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ESK - Encapsulated Sketch Pictures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This project is greatly inspired and based on EMP. EMS is a LaTeX
%% package to provide a convenient way to work with metapost files and
%% code from inside LaTeX documents.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \iffalse % esk.dtx - Encapsulated MetaPost for LaTeX(2e)
% Copyright (C) 2010 by tom@voodoo-arts.net
% $Id: emp.dtx,v 1.10 1997/11/12 21:14:41 ohl Exp $
%
% Esk is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by 
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
%
% Esk is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%
% \fi
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%% \CheckSum{291}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \MakeShortVerb{\|}
%
% \title{%
%   \ESK: \\
%   Encapsulated \SK{} for \LaTeX\thanks{%
%      This is \texttt{\filename}, version \fileversion,
%      revision \filerevision, date \filedate.}}
%
% \author{%
%   Tom Kazimiers\thanks{e-mail:
%     \texttt{tom@voodoo-arts.net}}}
%
% \maketitle
% \begin{abstract}
%   The \ESK{} package allows to encapsulate \SK{} files in \LaTeX{}
%   sources.  This is very useful for keeping illustrations in sync
%   with the text.  It also frees the user from inventing descriptive
%   names for \LaTeX{} files that fit into the confines of file
%   system conventions.
% \end{abstract}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \vfill
% \section*{Copying}
%
% \ESK{} is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by 
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
%
% \ESK{} is distributed in the hope that it will be useful, but
% \emph{without any warranty}; without even the implied warranty of
% \emph{merchantability} or \emph{fitness for a particular purpose}.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \newpage
% \unitlength=1mm
% \def\topfraction{0.9}
% \def\bottomfraction{0.9}
% \def\textfraction{0.1}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Introduction}
%
% When adding illustrations to documents, one faces two bookkeeping
% problems:
% \begin{enumerate}
%   \item How to encourage oneself to keep the illustrations in sync
%     with the text, when the document is updated?
%   \item How to make sure that the illustrations appear on the right
%     spot? 
% \end{enumerate}
% For both problems, the best solution is to encapsulate the figures
% in the \LaTeX{} source:
% \begin{enumerate}
%   \item It is much easier to remember to update an illustration if
%     one doesn't have to switch files in the editor.
%   \item One does not have to invent illustrative file names, if
%     the computer keeps track of them.
% \end{enumerate}
% Therefore \ESK{} was written to allow to encapsulate
% \SK{} into \LaTeX.
% Nevertheless, it is argueble that complex \SK{} figures may be easier
% handled in a seperate file. That is because it does not directly
% improve readability for ones source code to have the \SK{} code mixed
% with \LaTeX. But that's purely a matter of taste. To have \SK{} code in
% seperate files be included in your build process you could do the
% following:
% \begin{enumerate}
%   \item have your \SK{} code in a file, e. g. \emph{nice\_scene.sk}
%   \item include the file \emph{nice\_scene.sk.tex} in your document
%      source
%   \item configure your build in a way to automatically call \SK{} on all
%      \emph{\textasteriskcentered.sk} files, e.g in a Makefile: \newline
%        { |for i in `ls *.sk`; do sketch -o "$$i.tex" "$$i"; done| }  
% \end{enumerate}
% At least for less complex graphics it is more convinient to use \ESK{}
% and thus stay consistent more easily.
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Usage}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{Commands and Environments}
% \label{sec:commands}
%
% \DescribeEnv{esk}
% The |esk| environment contains the description of a single
% figure that will be placed at the location of the environment.
% The macro has two optional arguments. The first is the name of
% the figure and defaults to |\jobname|. It is used as the base
% name for file names. The second one consists of a comma separated
% list of names previously defined with |\eskdef|. Note that the
% names have to be put in parentheses (not brackets or braces).
% Those definitions will be prepended to the \SK-commands.
% \begin{quote}
% \begin{flushleft}
%   |\begin{esk}[|\meta{name}|](|\meta{def 1}|,|\meta{def 2}|,...)|\\
%     \qquad\meta{\SK-commands}\\
%   |\end{esk}|
% \end{flushleft}
% \end{quote}
%
% \DescribeEnv{eskdef}
% The |eskdef| environment acts as a container for \SK-commands.
% In contrast to |esk| nothing is written to a file or drawn, but
% kept in a token list register to recall it later on. Thus,
% reoccuring patterns can be factored out and used as argument
% in an |esk| environment. This is useful, because these
% environments use the |verbatim| package and can therefore
% \emph{not} be used directly as an argument to other macros.
% \begin{quote}
% \begin{flushleft}
%   |\begin{eskdef}{|\meta{name}|}|\\
%     \qquad\meta{\SK-commands}\\
%   |\end{eskdef}|
% \end{flushleft}
% \end{quote}
%
% \DescribeMacro{\eskprelude}
% Define a \SK{} prelude to be written to the top of every \SK{}
% file. The default is an empty prelude. Keep in mind that verbatim
% arguments are not allowed.
%
% \DescribeMacro{\eskaddtoprelude}
% Add to the \SK{} prelude.
% E. g.~|\eskaddtoprelude{def O (0,0,0)}| makes sure the varible O
% is available in all |esk| environments (and thus in every generated
% \SK{} file). Of cause, this could also be achived with |eskdef|.
%
% \DescribeMacro{\eskglobals}
% Define global \SK{} properties that get passed to the |global {...}|
% method of \SK. This defaults to |language tikz|.
%
% \DescribeMacro{\eskaddtoglobals}
% Add something to the global parameters of \SK.
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{Examples}
% \label{sec:examples}
%
% For a simple example, let's draw a pyramid in a coordinate
% system. Since our scene should be a composition of coordinate axes
% and the geometry and the parts might be reusable, we prepare
% definitions for the single parts. First the coordinate system:
%    \begin{macrocode}
%<*sample>
\begin{eskdef}{axes}
  def three_axes {
    % draw the axes
    def ax (dx,0,0)
    def ay (0,dy,0)
    def az (0,0,dz)
    line[arrows=<->,line width=.4pt](ax)(O)(ay)
    line[arrows=->,line width=.4pt](O)(az)
    % annote axes
    special |\path #1 node[left] {$z$}
                   #2 node[below] {$x$}
                   #3 node[above] {$y$};|(az)(ax)(ay)
  }
\end{eskdef}
%    \end{macrocode}
%\begin{eskdef}{axes}
  def three_axes {
    % draw the axes
    def ax (dx,0,0)
    def ay (0,dy,0)
    def az (0,0,dz)
    line[arrows=<->,line width=.4pt](ax)(O)(ay)
    line[arrows=->,line width=.4pt](O)(az)
    % annote axes
    special |\path #1 node[left] {$z$}
                   #2 node[below] {$x$}
                   #3 node[above] {$y$};|(az)(ax)(ay)
  }
%\end{eskdef}
% Now the pyramid:
%    \begin{macrocode}
\begin{eskdef}{pyramid}
  def pyramid {
    def p0 (0,2)
    def p1 (1.5,0)
    def N 4
    def seg_rot rotate(360 / N, [J])
    % draw the pyramid by rotating a line about the J axis
    sweep[fill=red!20, fill opacity=0.5] { N<>, [[seg_rot]] }
       line[cull=false,fill=blue!20,fill opacity=0.5](p0)(p1)
  }
\end{eskdef}
%    \end{macrocode}
%\begin{eskdef}{pyramid}
  def pyramid {
    def p0 (0,2)
    def p1 (1.5,0)
    def N 4
    def seg_rot rotate(360 / N, [J])
    % draw the pyramid by rotating a line about the J axis
    sweep[fill=red!20, fill opacity=0.5] { N<>, [[seg_rot]] }
       line[cull=false,fill=blue!20,fill opacity=0.5](p0)(p1)
  }
%\end{eskdef}
% In the definitions have some variable been used that have
% not been declared so far (|O|, |dx|, |dy|, |dz|, |J|). They have
% been introduced to make the definitions more versatile. In
% order to draw the scene their declarition has to be prepended
% to our output:
%    \begin{macrocode}
\eskaddtoprelude{def O (0,0,0)}
\eskaddtoprelude{def dx 2.3}
\eskaddtoprelude{def dy 2.5}
\eskaddtoprelude{def dz dx}
\eskaddtoprelude{def J [0,1,0]}
%    \end{macrocode}
%\eskaddtoprelude{def O (0,0,0)}
%\eskaddtoprelude{def dx 2.3}
%\eskaddtoprelude{def dy 2.5}
%\eskaddtoprelude{def dz dx}
%\eskaddtoprelude{def J [0,1,0]}
%
% Now the previously created definitions can be used to do the
% actual drawing. First, the coordinate system on its own:
%\begin{center}
%\begin{esk}(axes)
  def scene {
    {three_axes}
  }
  put { view((10,4,2)) } {scene}
%\end{esk}
%\end{center}
%    \begin{macrocode}
\begin{esk}(axes)
  def scene {
    {three_axes}
  }
  put { view((10,4,2)) } {scene}
\end{esk}
%    \end{macrocode}
% Now the pyramid (note, the transparency effect will only be
% visible in a pdf):
%\begin{center}
%\begin{esk}(pyramid)
  def scene {
    {pyramid}
  }
  put { view((10,4,2)) } {scene}
%\end{esk}
%\end{center}
%    \begin{macrocode}
\begin{esk}(pyramid)
  def scene {
    {pyramid}
  }
  put { view((10,4,2)) } {scene}
\end{esk}
%    \end{macrocode}
% Finally both:
%\begin{center}
%\begin{esk}(axes,pyramid)
  def scene {
    {three_axes}
    {pyramid}
  }
  put { view((10,4,2)) } {scene}
%\end{esk}
%\end{center}
%    \begin{macrocode}
\begin{esk}(axes,pyramid)
  def scene {
    {pyramid}
    {three_axes}
  }
  put { view((10,4,2)) } {scene}
\end{esk}
%    \end{macrocode}
% A more complex example schowing a super short baseline
% positioning system:
%\begin{center}
%\begin{esk}(axes)
def ee 0.0001
def sz 4 % length of each axis
def axes {
    line [arrows=<->,draw=blue,line width=0.5pt] (sz,0,0)(O)(0,sz,0)
    line [arrows=->,draw=blue,line width=.5pt]  (O)(0,0,sz)
    special |\node[above] at #1 {\scriptsize $z$};|(0,0,sz)
    special |\node[above] at #1 {\scriptsize $x$};|(0,sz,0)
    special |\node[above] at #1 {\scriptsize $y$};|(sz,0,0)}

def jR 1
def jR_inner 0.5/2
def jH 2/2

def cylinder put{rotate(90,[1,0,0])}{
  def n 10   
  sweep[draw=gray, line width= 0.01pt]{n<>, rotate(360/n,[0,1,0])}
    line[draw=black,fill=lightgray](jR,0)(jR,jH)}

def box put{translate([-1.5,-0.5,0])}{
  def n 1   
  sweep[fill=lightgray,  draw=gray]
        {n,translate([0,n,0])}
    sweep[fill=lightgray,  draw=gray]
        {n, translate([n,0,0])}line[fillcolor=gray](1,0,0)(1,0,1)}

def sphere put{rotate(90,[0,1,0])}{
   def n_faces 12
   sweep[fill=red, line width= 0.1pt] { n_faces, rotate(360/n_faces, [1,0,0])}
       sweep {n_faces, rotate(360/n_faces)}(0,1)}

def beacon {
    put {scale(0.1)}{sphere}
    put {translate([0,0,-1]) then scale([0.05,0.05,0.3])}{cylinder}}

def ax 30
def ay 35
def R 5

% Compute position of transponder
def T (R*sin(ax),R*sin(ay),0)   
% Compute transducer position
def P (0,0,sqrt(R^2-((T)'x^2+(T)'y^2)))  

def T_x ((T)'x,0)
def T_y (0,(T)'y)

def SSBLScene {
    {axes}
    % Draw projection of R
    line [line style=dashed,draw=gray] (T_x)(T)
    line [line style=dashed,draw=gray] (T_y)(T)
    line [line style=dashed,draw=gray] (T_y)(P)
    line [line style=dashed,draw=gray] (T_x)(P)
    line [draw=red] (P)(T)
    % draw labels
    special |\node[below right] at #1 {Transponder};|(T)  
    special |\node[right] at #1 {$\mathrm{Transducer}$};|(P)  
    def dT unit((T)-(P))
    def dT_y unit((T_y) -(P))
    def dT_x unit((T_x) -(P))
    
    % Draw angle annotations
    def pp (P)+[dT]*1.5
    def N [dT]*[dT_y]
    def m rotate(ax/2,(P),[dT]*[dT_y])
    def n [dT] then rotate(ax/2,(P),[dT]*[dT_y])
    def nb [dT] then rotate(ax,(P),[dT]*[dT_y])
    def ppm (P)+[n]*1.5
    def ppb (P)+[nb]*1.5
    
    special |\draw #1..controls #2 .. node[near end,below] {$\theta$} #3;\;|(pp)(ppm)(ppb)
    % \uput[-60]#2{$\theta$}|(pp)(ppm)(ppb)
    def nc [dT] then rotate(ay/2,(P),[dT]*[dT_x])
    def nbc [dT] then rotate(ay,(P),[dT]*[dT_x])
    def ppmc (P)+[nc]*1.5
    def ppbc (P)+[nbc]*1.5
    special |\draw #1.. controls #2.. #3;\node[below] at #2 {$\phi$};|(pp)(ppmc)(ppbc)
    def mT (P)+((T)-(P))/2
    
    put {translate((T)-(O))} {beacon}
    put {translate((P)-(O))}{put {scale(0.1)}{sphere}}}

def viewpoint (15,10,5)
def lookat (0, 0, 0)
def upvector [0,0,1]

put{ view((viewpoint),(lookat), [upvector])} {
    {SSBLScene}}
%\end{esk}
%\end{center}
%    \begin{macrocode}
\begin{esk}
def ee 0.0001
def sz 4 % length of each axis
def axes {
    line [arrows=<->,draw=blue,line width=0.5pt] (sz,0,0)(O)(0,sz,0)
    line [arrows=->,draw=blue,line width=.5pt]  (O)(0,0,sz)
    special |\node[above] at #1 {\scriptsize $z$};|(0,0,sz)
    special |\node[above] at #1 {\scriptsize $x$};|(0,sz,0)
    special |\node[above] at #1 {\scriptsize $y$};|(sz,0,0)}

def jR 1
def jR_inner 0.5/2
def jH 2/2

def cylinder put{rotate(90,[1,0,0])}{
  def n 10   
  sweep[draw=gray, line width= 0.01pt]{n<>, rotate(360/n,[0,1,0])}
    line[draw=black,fill=lightgray](jR,0)(jR,jH)}

def box put{translate([-1.5,-0.5,0])}{
  def n 1   
  sweep[fill=lightgray,  draw=gray]
        {n,translate([0,n,0])}
    sweep[fill=lightgray,  draw=gray]
        {n, translate([n,0,0])}line[fillcolor=gray](1,0,0)(1,0,1)}

def sphere put{rotate(90,[0,1,0])}{
   def n_faces 12
   sweep[fill=red, line width= 0.1pt] { n_faces, rotate(360/n_faces, [1,0,0])}
       sweep {n_faces, rotate(360/n_faces)}(0,1)}

def beacon {
    put {scale(0.1)}{sphere}
    put {translate([0,0,-1]) then scale([0.05,0.05,0.3])}{cylinder}}

def ax 30
def ay 35
def R 5

% Compute position of transponder
def T (R*sin(ax),R*sin(ay),0)   
% Compute transducer position
def P (0,0,sqrt(R^2-((T)'x^2+(T)'y^2)))  

def T_x ((T)'x,0)
def T_y (0,(T)'y)

def SSBLScene {
    {axes}
    % Draw projection of R
    line [line style=dashed,draw=gray] (T_x)(T)
    line [line style=dashed,draw=gray] (T_y)(T)
    line [line style=dashed,draw=gray] (T_y)(P)
    line [line style=dashed,draw=gray] (T_x)(P)
    line [draw=red] (P)(T)
    % draw labels
    special |\node[below right] at #1 {Transponder};|(T)  
    special |\node[right] at #1 {$\mathrm{Transducer}$};|(P)  
    def dT unit((T)-(P))
    def dT_y unit((T_y) -(P))
    def dT_x unit((T_x) -(P))
    
    % Draw angle annotations
    def pp (P)+[dT]*1.5
    def N [dT]*[dT_y]
    def m rotate(ax/2,(P),[dT]*[dT_y])
    def n [dT] then rotate(ax/2,(P),[dT]*[dT_y])
    def nb [dT] then rotate(ax,(P),[dT]*[dT_y])
    def ppm (P)+[n]*1.5
    def ppb (P)+[nb]*1.5
    
    special |\draw #1..controls #2 .. node[near end,below] {$\theta$} #3;\;|(pp)(ppm)(ppb)
    % \uput[-60]#2{$\theta$}|(pp)(ppm)(ppb)
    def nc [dT] then rotate(ay/2,(P),[dT]*[dT_x])
    def nbc [dT] then rotate(ay,(P),[dT]*[dT_x])
    def ppmc (P)+[nc]*1.5
    def ppbc (P)+[nbc]*1.5
    special |\draw #1.. controls #2.. #3;\node[below] at #2 {$\phi$};|(pp)(ppmc)(ppbc)
    def mT (P)+((T)-(P))/2
    
    put {translate((T)-(O))} {beacon}
    put {translate((P)-(O))}{put {scale(0.1)}{sphere}}}

def viewpoint (15,10,5)
def lookat (0, 0, 0)
def upvector [0,0,1]

put{ view((viewpoint),(lookat), [upvector])} {
    {SSBLScene}}
\end{esk}
%</sample>
%    \end{macrocode}
% Both examples have been taken from \cite{Fauske}, albeit some comments
% have been stripped. The first one by permission and the second one due
% to the MIT licencing of the soure.
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section*{Distribution}
% \label{sec:distribution}
%
% \section{WIP: Manual}
% In contrast to \MP{} Sketch can't produce different output files out of
% one sketch source file. This means every sketch figure has to be in its
% own file.
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \StopEventually{\PrintIndex\PrintChanges}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Implementation}
% \changes{v0.01}{2010/03/01}{Version 0.01 work in progress}
%
% This project is greatly inspired and based on EMP. EMP is a LaTeX package
% to provide a convenient way to work with metapost files and code from
% inside LaTeX documents.
%
% It's is good practice to identify this version of the document style
% option.  We do this by parsing an RCS |Id| string and storing the
% result in the conventional \TeX{} control sequences:
%    \begin{macrocode}
%<*style>
%
%%
%% TeX hints:
%%   - @ is considered a normal letter in packages and classes
%%   - There are 256 32Bit \count<num> registers (i. e. \count0=42),
%%     can be expanded with \the<register> (i.e. \the\count0) 
%%   - \relax ends scanning for tokens
%%     (i.e. \count0=\macro 42 <> \count0=\macro\relax 42) 
%%   - A macro defined with can has a maximum of 9 arguments
%%   - \gdef is shortcut for \global\def
%%     \xdef is shortcut for \global\edef
%%   - \string<\macro> returns the "macro" (the name of a macro)
%%
%% locally define the macro \fileversion (no parameters, replacement: v1.00)
\def\fileversion{v0.01}
%% Make clear what LaTeX version is needed: LaTeX2e
\NeedsTeXFormat{LaTeX2e}
%% Now define localy (visible in scope) a RCS (revision control system)
%% parser macro and define out of this global varibles like filename, etc.
{\def\RCS#1#2\endRCS{%
%% is the first parameter a "$%?
  \ifx$#1%
    \@RCS $#2 \endRCS
  \else
    \@RCS $*: #1#2$ \endRCS
  \fi}%
 \def\@RCS $#1: #2,v #3 #4 #5 #6 #7$ \endRCS{%
%% global defines (independent of current scope) of file attributes
%% (http://en.wikibooks.org/wiki/TeX/gdef)
   \gdef\filename{#2}%
   \gdef\filerevision{#3}%
   \gdef\filedate{#4}%
   \gdef\filemaintainer{#6}}%
\RCS $Id: esk.dtx,v 0.10 2009/08/15 21:14:41 kazimiers Exp $ \endRCS}%
%    \end{macrocode}
%
% And now the standard procedure:
%    \begin{macrocode}
\ProvidesPackage{esk}[\filedate\space\fileversion\space
  Encapsulated Sketch LaTeX Package (\filemaintainer)]
%    \end{macrocode}
% Every option we don't understand is sent down to |graphics|.
% Afterwars invoke the actual macro for each found and declared opton.
% Having finished, stop scanning for tokens.
%    \begin{macrocode}
%% Every option ("*") is passed down to the graphics package
\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{graphics}}
\ProcessOptions\relax
\RequirePackage{graphics}[1994/12/15]
\RequirePackage{verbatim}
\RequirePackage{kvsetkeys}[2007/09/29]
%    \end{macrocode}
%


% \begin{macro}{\eskwrite}
%    \begin{macrocode}
% Define the \percent sign locally as a common letter and create a
% global macro using it. That macro is used for creating comments.
%% (http://de.wikibooks.org/wiki/LaTeX-W%C3%B6rterbuch:_TeX_Primitiven:_%5Ccatcode)
%% and globally (but through the @ only visible inside the package (http://de.wikibooks.org/wiki/LaTeX-W%C3%B6rterbuch:_@))
%% define a percent sign macro (used for comments)
{\catcode`\%=11\gdef\p@rcent{%}}
% Since we need curly braces in Sketch, define macros for creating
% them. This is done like in the |p@rcent| macro.
{\catcode`\>=1  \catcode`\<=2
 \catcode`\{=11 \catcode`\}=11
 \gdef\lc@rly>{<
 \gdef\rc@rly>}<
 \catcode`\{=1  \catcode`\}=2
}
% Define a macro to write the contents of its first argument to a file.
\def\eskwrite#1{%
  %% is the variable "@eskio" set?
  \if@eskio
    %% write the contents of "#1" immediately, instead of waiting for
    %% shipout
    %% (http://www.tug.org/utilities/plain/cseq.html#immediate-rp)
    %% where to write is stored in "\@outesk"
    %% (http://www.tug.org/utilities/plain/cseq.html#write-rp)
    \immediate\write\@outesk{#1}%
  \fi
  %% ignore all the space on the input that follow immediately
  %% (http://en.wikibooks.org/wiki/TeX/ignorespaces)
  \ignorespaces}
% If a token list register should be put into a file, this macro should
% be used.
\def\eskwritetoken#1{
	\eskwrite{\the#1}
}
% Create a new private boolean toggle to reflect if file writing
% is enabled and set it to true.
\newif\if@eskio
\@eskiotrue
% Define the next free file handle to be referenced by private macro |\@outesk|
%% but do not open it (exampla file open: \openout\@outesk=TEXTFILE.TXT)
%% see: (http://books.google.de/books?id=bXLDwmIJNkUC&pg=PA283&lpg=PA283&dq=tex+%22\newwrite%22&source=bl&ots=xNXas4Y6Rz&sig=KrxZPqhl_0izHGvda9235RoyTHU&hl=de&ei=tKKGSszRGML6_AaNgaGWBw&sa=X&oi=book_result&ct=result&resnum=10#v=onepage&q=tex%20%22\newwrite%22&f=false)
\newwrite\@outesk
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskfile}
% This environment encloses each Sketch input file.  The single optional
% argument gives the name of the file and defaults to |\jobname|.
%    \begin{macrocode}
\newcommand{\eskfile}[1][\jobname]{%
  \def\theeskfile{#1}%
%    \end{macrocode}
% Open the Sketch file.  If we're running under AMS-\LaTeX, turn off
% I/O during the first pass over equation environments.
%    \begin{macrocode}
  %% Is @eskio set/true?
  \if@eskio
    %% Is "ifmeasuring@" undefined?
    \@ifundefined{ifmeasuring@}%
      {}%
      {\def\if@eskio{\ifmeasuring@\else}}%
    %% Assign a new output file (our "\theeskfile") to our
    %% "@outesk" file number
    \immediate\openout\@outesk=\theeskfile.sk\relax
    %% And write start comment out immediately
    \eskwrite{\p@rcent\p@rcent\p@rcent\space \theeskfile.sk -- %
              do not edit, generated automatically by \jobname.tex}%
%    \end{macrocode}
% append |\begin{document}| to a non-empty |\LaTeX| prelude and write
% it out:
% \begin{macrocode}
    %% if "\esk@prelude" token register is empty, "\the\..." will be
    %% replaced by an empty sting and "\ifx" will yield in true
    %% (because * equals *), and the "\else" branch will _not_ be called.
    %% If the token register is not empty (and does not start with
    %% an asterisk) the \else-branch is called.
    \expandafter\ifx\expandafter*\the\esk@prelude*\else
      \eskwrite{\the\esk@prelude}%
    \fi
  \fi}

% Define |\theeskfile|, referencing the name of the currently opened file,
% to be |\relax| (i. e. stop reading tokens). This should be the value if
% no file is opened.
\let\theeskfile\relax
% Define a new counter |\eskfig| (initialized with 0) to
% count the single esk figures.
\newcounter{eskfig}
%    \end{macrocode}
% Standard preludes:
%    \begin{macrocode}
%% Create a new token register alias "\esk@prelude"
%% If the indirct alias creation \newtoks is used, TeX selects a
%% register to take and hides this technical detail from us.
\newtoks\esk@prelude
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskprelude}
%   \begin{macro}{\eskaddtoprelude}
%     \begin{macrocode}
%% define a public \eskprelude macro that replaces the contents
%% of the internal token register \esk@prelude with its argument
\def\eskprelude#1{\esk@prelude={#1}}
%% define a public \eskaddtoprelude macro that appends its argument
%% to the internal \esk@prelude token register on a new line
%% ^^J is a replacement ascii representation for LF or line feed
%% (see: http://www.torsten-horn.de/techdocs/ascii.htm)
\def\eskaddtoprelude#1{\esk@prelude=\expandafter{\the\esk@prelude^^J#1}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}

\newtoks\esk@globals
\esk@globals={language tikz}

%% define a public \eskglobals macro that replaces the contents
%% of the internal token register \esk@globals with its argument
\def\eskglobals#1{\esk@globals={#1}}
%% define a public \eskaddtoglobals macro that appends its argument
%% to the internal \esk@globals token register, delimited by a comma
\def\eskaddtoglobals#1{\esk@globals=\expandafter{\the\esk@globals,#1}}

% \begin{macro}{\endeskfile}
% And here is how we close the |empfile| environment:
%    \begin{macrocode}
\def\endeskfile{%
  %% write global settings, if any
  \expandafter\ifx\expandafter*\the\esk@globals*\else
    \eskwrite{global \lc@rly\the\esk@globals\rc@rly }%
  %\fi
  %% write end statements to the file
  \eskwrite{\p@rcent\p@rcent\p@rcent\space the end.^^J}%
  %% Like in intialization, let "\theeskfile" be the same as "\relax"
  %% This an indicator of being outside of an eskfile environment.
  \let\theeskfile\relax
  %% if a file is opened, close it.
  \if@eskio
    \immediate\closeout\@outesk
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk}
%    \begin{macrocode}
%% define a public macro to (re-)define "\esk@@name" with the argument
%% (or the default: the job name ) and call internal \esk@ to produce a single
%% esk graphic
\newcommand{\esk}[1][\jobname]{%
  \def\esk@@name{#1}%
  \esk@}
%    \end{macrocode}
% \end{macro}
%
\let\leftparanthesis=(
%
% \begin{macro}{\esk@}
%    \begin{macrocode}
%% define a private \esk@ macro
\def\esk@{
  %% save tho next token into \next
  %% and invoke \esk@impl
  \futurelet\next\esk@impl
}
\def\esk@impl{%
  %% check if there is an optional eskdef list argument
  \ifx\next\leftparanthesis
    %% get rid of the \else by invoking \expandafter
    \expandafter\esk@impl@Arg
  \else
    %% get rid of the \fi by invoking \expandafter
    \expandafter\esk@impl@NoArg
  \fi
}
%% invokes \esk@impl@Arg with empty argument
\def\esk@impl@NoArg{\esk@impl@Arg()}
%% the actual implementation
\def\esk@impl@Arg(#1){%
  \esk@start%
  \esk@includegraphics{\theeskfile}%
  %% process optional definition
  \comma@parse{#1}{\esk@def@processor}
  \esk@cmds{eskwritetoken}}
%    \end{macrocode}
% \end{macro}
%
\def\esk@def@processor#1{
  \esk@use{#1}
}
%
% \begin{macro}{\esk@start}
%    \begin{macrocode}
%% A macro for creating a new Sketch figure. The parameters
%% are width and height of the figure.
\def\esk@start{%
%    \end{macrocode}
% We can't use |\stepcounter| because of the |amstext| option of
% AMS-\LaTeX{} disables it sometimes.
%    \begin{macrocode}
  %% globally advance the eskfig counter manually by one
  \global\expandafter\advance\csname c@eskfig\endcsname \@ne
  %% make sure that a sketch file is open
  \esk@checkfile
  %% call \esk@@def with our prev. defined temporary esk file name 
  %% and gererate new \theeskfile and \theeskfile alias macros
  \esk@@def{\esk@@name}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@checkfile}
% Make sure that a Sketch file is open, otherwise \emph{really}
% obscure error messages are possible:
%    \begin{macrocode}
\def\esk@checkfile{%
  %% check if "\theeskfile" is the same as "\relax" (as defined for
  %% initialization). If so, print and produce error.
  \ifx\theeskfile\relax
    \eskfile[\esk@@name.\arabic{eskfig}]
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@includegraphics}
%    \begin{macrocode}
\def\esk@includegraphics#1{%
  %% switch from vertical to horizontal mode
  \leavevmode
  \IfFileExists{#1.sk.tex}%
    %% The actual file must heve the extension ".tex", "\input"
    %% expects this.
    {\input{#1.sk.tex}}%
    {\typeout{%
      esk: File #1.sk.tex\space not found:^^J%
      esk: Process #1.sk with Sketch (-o #1.sk.tex) and then %
           reprocess this file.}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@cmds}
% Write the Sketch code to a target. This could be any macro taking one argument. In use are |eskwrite| and |esk@def@verbatim@handler|.
%    \begin{macrocode}
\newcommand{\esk@cmds}[1]{%
  %% create a new environment
  \begingroup
    %% \@bsphack ... \@esphack
    %%     used by macros such as \index and \begin{@float} ... \end{@float}
    %%     that want to be invisible -- i.e.,
    %%     not leave any extra space when used in the middle of text.  Such
    %%     a macro should begin with \@bsphack and end with \@esphack
    %%     The macro in question should not create any text, nor change the
    %%     mode
    \@bsphack
    %% defuse latex special characters:
    %% \dospeciels contains a list of special characters of the form
    %% "\do\ \do\\\do\{\do\}...". If one (re-)defines the "\do" macro
    %% one can execute a macro on all of them. In our case we define
    %% "\do" with "\@makeother" that assigns "\catcode 12" (non-letter),
    %% thus they get normal characters without any special meaning.
    %% Due to the environment those changes are local.
    \let\do\@makeother\dospecials
    %% ^^M is the ascii representation of CR (carriage return). Make it
    %% an active character. Thus a macro with the name "^^M" can now be
    %% defined.
    \catcode`\^^M\active
    %% Since we use the verbatim package "\verbatim@processline" is called
    %% after each line. We redifine it to do what we would like it to do
    %% (the current line is available in "\verbatim@line", a token register):
    %% Write the current line into the esk file.
    %% from: Latex hacks, p. 43 of Anselm Lingnau
    \def\verbatim@processline{\csname#1\endcsname{\verbatim@line}}%
    %% Enter the real verbatim mode, from here on _all_ characters have
    %% lost their special meaning (if they had any).
    \verbatim@start}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endesk@cmds}
%    \begin{macrocode}
\def\endesk@cmds{%
    %% end invisible environment (see \esk@cmds)
    \@esphack
  \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endesk}
%    \begin{macrocode}
\def\endesk{%
  %% end esk input environment
  \endesk@cmds
  %% close the current file
  \endeskfile
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskdef}
%    \begin{macrocode}
\newcommand{\eskdef}[1]{%
  %% TODO: Make it more robust by remembering old name
  %% and setting it back afterwards (if any), so it can
  %% be used in esk envirnoments

  %% Define a new name
  \def\esk@@def@name{esk@def:#1}%
  \esk@def}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@def}
%    \begin{macrocode}
\def\esk@def{%
  %% Test if the name is already registered
  \expandafter\ifcsname\esk@@def@name\endcsname
    \rrrmessage{"\esk@@def@name" is already defined!}
  \fi
  %% Create new token registers named like the
  %% expansion of \esk@@def@name
  %% new... tokens act always globally
  \global\expandafter\tok@newtoks\csname\esk@@def@name\endcsname
  %% Create/Override a global definition "\esk@@def@reg" containing
  %% our new token register. Unfortunately, this works only with
  %% a global definition.
  \global\edef\esk@@def@reg{\csname\esk@@def@name\endcsname}
  %% call the verbatim reading of the environment
  \esk@cmds{esk@def@verbatim@handler}}
  %% clear the temp token list register alias
  \global\def\esk@@def@reg{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@def@verbatim@handler}
%    \begin{macrocode}
\def\esk@def@verbatim@handler#1{%
  %% create a local alias for the token register
  \expandafter\let\expandafter\token@reg\esk@@def@reg

  \expandafter\ifx\expandafter*\the\token@reg*
    %% if the token register is empty, override it...
    \global\esk@@def@reg=\expandafter{\the#1}
  \else
    %% ...oterwise append the parameter to current token register
    \global\esk@@def@reg=\expandafter{\the\expandafter\token@reg\expandafter^^J\the#1}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endeskdef}
%    \begin{macrocode}
\def\endeskdef{
  %% end esk input environment
  \endesk@cmds}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@@def}
%    \begin{macrocode}
%% a macro vhich takes a file name as argument to
%% globally define new macros "esk@k:f:<arg>" and
%% "esk@k:c:<arg>" which have the replacements
%% \theeskfile and \theeskfig respectively.
\def\esk@@def#1{%
  \global\e@namedef{esk@k:f:#1}{\theeskfile}%
  \global\e@namedef{esk@k:c:#1}{\theeskfig}}
%% a macro which defines a new macro with the name of the
%% argument (generated by \expandafter and \csname..,) and
%% expands the following tokens (the new macros body) due
%% to the use of \edef dynamically
\def\e@namedef#1{\expandafter\edef\csname #1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@use}
%    \begin{macrocode}
\def\esk@use#1{%
  \def\esk@@def@name{esk@def:#1}%
  %% Test if the name is registered
  \expandafter\ifcsname\esk@@def@name\endcsname
    %% write describing comment as prelude to definiton include
    \eskwrite{\p@rcent\p@rcent\space included definition: #1}%
    %% write the contents of the token into the file
    \expandafter\eskwritetoken\expandafter{\expandafter\csname\esk@@def@name\endcsname}
    %% write trailing line break to make result look nicer
    \eskwrite{^^J}
  \else
    \errmessage{esk: "#1" is undefined!}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tok@newtoks}
% Since |\newtoks| is an |\outer| macro, it is not allowed in definitios.
% Because of that we define a wrapper:
%    \begin{macrocode}
\def\tok@newtoks{
  \csname newtoks\endcsname}
%</style>
%    \end{macrocode}
% \end{macro}
%
%
\def\futurenospacelet#1{\def\cs{#1}%
  \afterassignment\stepone\let\nexttoken= }
\def\\{\let\stoken= } \\ % now \stoken is a space tokes
\def\stepone{\expandafter\futurelet\cs\steptwo}
\def\steptwo{\expandafter\ifx\cs\stoken\let\next=\stepthree
  \else\let\next=\nexttoken\fi \next}
\def\stepthree{\afterassignment\stepone\let\next= }
%
%
% \Finale
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \appendix
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Driver File}
%
%    \begin{macrocode}
%<*driver>
\documentclass[a4paper]{article}
\usepackage{doc}
\usepackage{amsmath}
%    \end{macrocode}
% The logos come out much nicer if you have |mflogo| installed:
%    \begin{macrocode}
\def\ESK{\textsf{ESK}}%
\def\SK{\textsf{Sketch}}%
\def\MP{\textsf{META}\-\textsf{POST}}%

%    \end{macrocode}
% Protect against certain obsolete versions of the |graphics| and the |kvsetkeys| package:
%    \begin{macrocode}
\usepackage{graphics}[1994/12/15]
\usepackage{kvsetkeys}[2007/09/29]
\usepackage{tikz}
\usepackage{esk}
%    \end{macrocode}
%    \begin{macrocode}
\setlength{\parindent}{0pt}
\def\manindex#1{\SortIndex{#1}{#1}}
%<manual>\OnlyDescription
\EnableCrossrefs
\RecordChanges
\CodelineIndex
\DoNotIndex{\def,\gdef,\long,\let,\begin,\end,\if,\ifx,\else,\fi}
\DoNotIndex{\immediate,\write,\newwrite,\openout,\closeout,\typeout}
\DoNotIndex{\font,\jobname,\documentclass,\char,\catcode,\ }
\DoNotIndex{\CodelineIndex,\DocInput,\DoNotIndex,\EnableCrossrefs}
\DoNotIndex{\filedate,\filename,\fileversion,\logo,\manfnt}
\DoNotIndex{\NeedsTeXFormat,\ProvidesPackage,\RecordChanges,\space}
\DoNotIndex{\begingroup,\csname,\edef,\endcsname,\expandafter}
\DoNotIndex{\usepackage,\@ifundefined,\ignorespaces,\item,\leavevmode}
\DoNotIndex{\newcounter,\newif,\par,\parindent}
\DoNotIndex{\relax,\setcounter,\stepcounter,\the,\advance}
\DoNotIndex{\CurrentOption,\DeclareOption,\documentstyle}
\DoNotIndex{\endgroup,\global,\hfuzz,\LaTeX,\LaTeXe}
\DoNotIndex{\macrocode,\OnlyDescription,\PassOptionsToPackage}
\DoNotIndex{\ProcessOptions,\RequirePackage,\string,\textsf,\unitlength}
\DoNotIndex{\@bsphack,\@esphack,\@nameuse,\@ne,\active,\do,\dospecials}
\DoNotIndex{\errhelp,\errmessage,\ifcase,\IfFileExists,\includegraphics}
\DoNotIndex{\manindex,\SortIndex,\newcommand,\newtoks,\or,\origmacrocode}
\DoNotIndex{\alpha,\displaystyle,\frac,\sin,\texttt}
%    \end{macrocode}
% Cut the line breaking some slack for macro code which might contain
% long lines (it doesn't really hurt if they stick out a bit).
%    \begin{macrocode}
\let\origmacrocode\macrocode
\def\macrocode{\hfuzz 5em\origmacrocode}
\begin{document}
  \DocInput{esk.dtx}
\end{document}
%</driver>
%    \end{macrocode}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\endinput
Local Variables:
mode:LaTeX
fill-prefix:"% "
indent-tabs-mode:nil
change-log-default-name:"TODO"
page-delimiter:"^% %%%%%%%%%*\n"
End:
