%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ESP - Encapsulated Sketch Pictures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This project is greatly inspired and based on EMP. EMS is a LaTeX
%% package to provide a convenient way to work with metapost files and
%% code from inside LaTeX documents.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{WIP: Manual}
% In contrast to \MP{} Sketch can't produce different output files out of
% one sketch source file. This means every sketch figure has to be in its
% own file.
%
% \section{Implementation}
% \changes{v0.01}{2010/03/01}
%
% This project is greatly inspired and based on EMP. EMP is a LaTeX package
% to provide a convenient way to work with metapost files and code from
% inside LaTeX documents.
%
% It's is good practice to identify this version of the document style
% option.  We do this by parsing an RCS |Id| string and storing the
% result in the conventional \TeX{} control sequences:
%    \begin{macrocode}
%<*style>
%
%%
%% TeX hints:
%%   - @ is considered a normal letter in packages and classes
%%   - There are 256 32Bit \count<num> registers (i. e. \count0=42),
%%     can be expanded with \the<register> (i.e. \the\count0) 
%%   - \relax ends scanning for tokens
%%     (i.e. \count0=\macro 42 <> \count0=\macro\relax 42) 
%%   - A macro defined with can has a maximum of 9 arguments
%%   - \gdef is shortcut for \global\def
%%     \xdef is shortcut for \global\edef
%%   - \string<\macro> returns the "macro" (the name of a macro)
%%
%% locally define the macro \fileversion (no parameters, replacement: v1.00)
\def\fileversion{v0.01}
%% Make clear what LaTeX version is needed: LaTeX2e
\NeedsTeXFormat{LaTeX2e}
%% Now define localy (visible in scope) a RCS (revision control system)
%% parser macro and define out of this global varibles like filename, etc.
{\def\RCS#1#2\endRCS{%
%% is the first parameter a "$%?
  \ifx$#1%
    \@RCS $#2 \endRCS
  \else
    \@RCS $*: #1#2$ \endRCS
  \fi}%
 \def\@RCS $#1: #2,v #3 #4 #5 #6 #7$ \endRCS{%
%% global defines (independent of current scope) of file attributes
%% (http://en.wikibooks.org/wiki/TeX/gdef)
   \gdef\filename{#2}%
   \gdef\filerevision{#3}%
   \gdef\filedate{#4}%
   \gdef\filemaintainer{#6}}%
\RCS $Id: esk.dtx,v 0.10 2009/08/15 21:14:41 kazimiers Exp $ \endRCS}%
%    \end{macrocode}
%
% And now the standard procedure:
%    \begin{macrocode}
\ProvidesPackage{esk}[\filedate\space\fileversion\space
  Encapsulated Sketch LaTeX Package (\filemaintainer)]
%    \end{macrocode}
% Every option we don't understand is sent down to |graphics|:
%    \begin{macrocode}
%% Every option ("*") is passed down to the graphics package
\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{graphics}}
%% Call the actual code for each found and declared opton.
%% Stop scanning for tokens afterwards.
\ProcessOptions\relax
\RequirePackage{graphics}[1994/12/15]
\RequirePackage{verbatim}
%    \end{macrocode}
%


% \begin{macro}{\eskwrite}
%    \begin{macrocode}
%% define the % sign locally as a common letter
%% (http://de.wikibooks.org/wiki/LaTeX-W%C3%B6rterbuch:_TeX_Primitiven:_%5Ccatcode)
%% and globally (but through the @ only visible inside the package (http://de.wikibooks.org/wiki/LaTeX-W%C3%B6rterbuch:_@))
%% define a percent sign macro (used for comments)
{\catcode`\%=11\gdef\p@rcent{%}}
%% define curly brace macros
{\catcode`\>=1  \catcode`\<=2
 \catcode`\{=11 \catcode`\}=11
 \gdef\lc@rly>{<
 \gdef\rc@rly>}<
 \catcode`\{=1  \catcode`\}=2
}
%% define a macro to write to a file specified by #1
\def\eskwrite#1{%
  %% is the variable "@eskio" set?
  \if@eskio
    %% write the contents of "#1" immediately, instead of waiting for
    %% shipout
    %% (http://www.tug.org/utilities/plain/cseq.html#immediate-rp)
    %% where to write is stored in "\@outesk"
    %% (http://www.tug.org/utilities/plain/cseq.html#write-rp)
    \immediate\write\@outesk{#1}%
  \fi
  %% ignore all the space on the input that follow immediately
  %% (http://en.wikibooks.org/wiki/TeX/ignorespaces)
  \ignorespaces}

\def\eskwritetoken#1{
	\eskwrite{\the#1}
}

%% create new private boolean toggle "@eskio"... (http://newsgroups.derkeiler.com/Archive/Comp/comp.text.tex/2007-05/msg00698.html)
\newif\if@eskio
%% ...and set it to true
\@eskiotrue
%% define the next free file number (in range 0-15) to private macro "\@outesk",
%% but do not open it (exampla file open: \openout\@outesk=TEXTFILE.TXT)
%% see: (http://books.google.de/books?id=bXLDwmIJNkUC&pg=PA283&lpg=PA283&dq=tex+%22\newwrite%22&source=bl&ots=xNXas4Y6Rz&sig=KrxZPqhl_0izHGvda9235RoyTHU&hl=de&ei=tKKGSszRGML6_AaNgaGWBw&sa=X&oi=book_result&ct=result&resnum=10#v=onepage&q=tex%20%22\newwrite%22&f=false)
\newwrite\@outesk
%    \end{macrocode}
% \end{macro}
%



% \begin{macro}{\eskfile}
% This environment encloses each Sketch input file.  The single optional
% argument gives the name of the file and defaults to |\jobname|.
%    \begin{macrocode}
\newcommand{\eskfile}[1][\jobname]{%
  \def\theeskfile{#1}%
%    \end{macrocode}
% Open the Sketch file.  If we're running under AMS-\LaTeX, turn off
% I/O during the first pass over equation environments.
%    \begin{macrocode}
  %% Is @eskio set/true?
  \if@eskio
    %% Is "ifmeasuring@" undefined?
    \@ifundefined{ifmeasuring@}%
      {}%
      {\def\if@eskio{\ifmeasuring@\else}}%
    %% Assign a new output file (our "\theeskfile") to our
    %% "@outesk" file number
    \immediate\openout\@outesk=\theeskfile.sk\relax
    %% And write start comment out immediately
    \eskwrite{\p@rcent\p@rcent\p@rcent\space \theeskfile.sk -- %
              do not edit, generated automatically by \jobname.tex}%
%    \end{macrocode}
% append |\begin{document}| to a non-empty |\LaTeX| prelude and write
% it out:
% \begin{macrocode}
    %% if "\esk@prelude" token register is empty, "\the\..." will be
    %% replaced by an empty sting and "\ifx" will yield in true
    %% (because * equals *), and the "\else" branch will _not_ be called.
    %% If the token register is not empty (and does not start with
    %% an asterisk) the \else-branch is called.
    \expandafter\ifx\expandafter*\the\esk@prelude*\else
      \eskwrite{\the\esk@prelude}%
    \fi
  \fi}
%% Redefine \theeskfile with \relax
\let\theeskfile\relax
% Define a new counter "eskfig" (initialized with 0) to
% count the single esk figures.
\newcounter{eskfig}
%    \end{macrocode}
% Standard preludes:
%    \begin{macrocode}

%% Create a new symbolic token register name "\esk@TeX"
%% If the indirct alias creation \newtoks is used, TeX selects a
%% register to take and hides this technical detail from us.
\newtoks\esk@TeX

%% Again, create a new token register alias "\esk@prelude"
\newtoks\esk@prelude
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskTeX}
%   \begin{macro}{\eskaddtoTeX}
%     \begin{macro}{\eskprelude}
%       \begin{macro}{\eskaddtoprelude}
%    \begin{macrocode}
%% define a public "\eskTeX" macro that fills the \esk@TeX
%% token register with its argument (#1) - thus, overrides it
\def\eskTeX#1{\esk@TeX={#1}}
%% defines a public "\eskadddtTeX macro that appends its argument
%% to the token register \esk@TeX on a new line. ^^J is a replacement ascii
%% representation for LF or line feed" (http://www.torsten-horn.de/techdocs/ascii.htm)
\def\eskaddtoTeX#1{\esk@TeX=\expandafter{\the\esk@TeX^^J#1}}
%% define a public \eskprelude macro that replaces the contents
%% of the internal token register \esk@prelude with its argument
\def\eskprelude#1{\esk@prelude={#1}}
%% define a public \eskaddtoprelude macro that appends its argument
%% to the internal \esk@prelude token register on a new line
\def\eskaddtoprelude#1{\esk@prelude=\expandafter{\the\esk@prelude^^J#1}}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}

\newtoks\esk@globals
\esk@globals={language tikz}

%% define a public \eskglobals macro that replaces the contents
%% of the internal token register \esk@globals with its argument
\def\eskglobals#1{\esk@globals={#1}}
%% define a public \eskaddtoglobals macro that appends its argument
%% to the internal \esk@globals token register, delimited by a comma
\def\eskaddtoglobals#1{\esk@globals=\expandafter{\the\esk@globals,#1}}

% \begin{macro}{\endeskfile}
% And here is how we close the |empfile| environment:
%    \begin{macrocode}
\def\endeskfile{%
  %% write global settings, if any
  \expandafter\ifx\expandafter*\the\esk@globals*\else
    \eskwrite{global \lc@rly\the\esk@globals\rc@rly }%
  %\fi
  %% write end statements to the file
  \eskwrite{\p@rcent\p@rcent\p@rcent\space the end.^^J}%
  %% Like in intialization, let "\theeskfile" be the same as "\relax"
  %% This an indicator of being outside of an eskfile environment.
  \let\theeskfile\relax
  %% if a file is opened, close it.
  \if@eskio
    \immediate\closeout\@outesk
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk}
%    \begin{macrocode}
%% define a public macro to (re-)define "\esk@@name" with the argument
%% (or the default: the job name ) and call internal \esk@ to produce a single
%% esk graphic
\newcommand{\esk}[1][\jobname]{%
  \def\esk@@name{#1}%
  \esk@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@}
%    \begin{macrocode}
%% define a private \esk@ macro
\def\esk@(#1,#2){%
  \esk@start{#1}{#2}%
  \esk@includegraphics{\theeskfile}%
  \esk@cmds{eskwritetoken}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@start}
%    \begin{macrocode}
%% A macro for creating a new Sketch figure. Te parameters
%% are width and height of the figure.
\def\esk@start#1#2{%
%    \end{macrocode}
% We can't use |\stepcounter| because of the |amstext| option of
% AMS-\LaTeX{} disables it sometimes.
%    \begin{macrocode}
  %% globally advance the eskfig counter manually by one
  \global\expandafter\advance\csname c@eskfig\endcsname \@ne
  %% make sure that a sketch file is open
  \esk@checkfile
  %% call \esk@@def with our prev. defined temporary esk file name 
  %% and gererate new \theeskfile and \theeskfile alias macros
  \esk@@def{\esk@@name}%
%    \end{macrocode}
% Start the Sketch figure:
%    \begin{macrocode}
  %% TODO: write out the sketch figure introduction
  %%\eskwrite{beginfig(\theeskfig);^^J%
  %%                   LaTeX_unitlength := \the\unitlength;^^J%
  %%                   w := #1*LaTeX_unitlength;^^J%
  %%                   h := #2*LaTeX_unitlength;}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@checkfile}
% Make sure that a Sketch file is open, otherwise \emph{really}
% obscure error messages are possible:
%    \begin{macrocode}
\def\esk@checkfile{%
  %% check if "\theeskfile" is the same as "\relax" (as defined for
  %% initialization). If so, print and produce error.
  \ifx\theeskfile\relax
    \eskfile[\esk@@name.\arabic{eskfig}]
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@includegraphics}
%    \begin{macrocode}
\def\esk@includegraphics#1{%
  %% switch from vertical to horizontal mode
  \leavevmode
  \IfFileExists{#1.sk.tex}%
    %% The actual file must heve the extension ".tex", "\input"
    %% expects this.
    {\input{#1.sk.tex}}%
    {\typeout{%
      esk: File #1.sk.tex\space not found:^^J%
      esk: Process #1.sk with Sketch (-o #1.sk.tex) and then %
           reprocess this file.}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@cmds}
% Write the Sketch code to a target. This could be any macro taking one argument. In use are |eskwrite| and |esk@def@verbatim@handler|.
%    \begin{macrocode}
\newcommand{\esk@cmds}[1]{%
  %% create a new environment
  \begingroup
    %% \@bsphack ... \@esphack
    %%     used by macros such as \index and \begin{@float} ... \end{@float}
    %%     that want to be invisible -- i.e.,
    %%     not leave any extra space when used in the middle of text.  Such
    %%     a macro should begin with \@bsphack and end with \@esphack
    %%     The macro in question should not create any text, nor change the
    %%     mode
    \@bsphack
    %% defuse latex special characters:
    %% \dospeciels contains a list of special characters of the form
    %% "\do\ \do\\\do\{\do\}...". If one (re-)defines the "\do" macro
    %% one can execute a macro on all of them. In our case we define
    %% "\do" with "\@makeother" that assigns "\catcode 12" (non-letter),
    %% thus they get normal characters without any special meaning.
    %% Due to the environment those changes are local.
    \let\do\@makeother\dospecials
    %% ^^M is the ascii representation of CR (carriage return). Make it
    %% an active character. Thus a macro with the name "^^M" can now be
    %% defined.
    \catcode`\^^M\active
    %% Since we use the verbatim package "\verbatim@processline" is called
    %% after each line. We redifine it to do what we would like it to do
    %% (the current line is available in "\verbatim@line", a token register):
    %% Write the current line into the esk file.
    %% from: Latex hacks, p. 43 of Anselm Lingnau
    \def\verbatim@processline{\csname#1\endcsname{\verbatim@line}}%
    %% Enter the real verbatim mode, from here on _all_ characters have
    %% lost their special meaning (if they had any).
    \verbatim@start}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endesk@cmds}
%    \begin{macrocode}
\def\endesk@cmds{%
    %% end invisible environment (see \esk@cmds)
    \@esphack
  \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endesk}
%    \begin{macrocode}
\def\endesk{%
  %% end esk input environment
  \endesk@cmds
  %% close the current file
  \endeskfile
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskdef}
%    \begin{macrocode}
\newcommand{\eskdef}[1]{%
  %% TODO: Make it more robust by remembering old name
  %% and setting it back afterwards (if any), so it can
  %% be used in esk envirnoments

  %% Define a new name
  \def\esk@@def@name{esk@def:#1}%
  \esk@def}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@def}
%    \begin{macrocode}
\def\esk@def{%
  %% Test if the name is already registered
  \expandafter\ifcsname\esk@@def@name\endcsname
    \errmessage{"\esk@@def@name" is already defined!}
  \fi
  %% Create new token registers named like the
  %% expansion of \esk@@def@name
  %% new... towkens act always globally
  \global\expandafter\tok@newtoks\csname\esk@@def@name\endcsname
  %% Create/Override a global definition "\esk@@def@reg" containing
  %% our new token register. Unfortunately, this works only with
  %% a global definition.
  \global\edef\esk@@def@reg{\csname\esk@@def@name\endcsname}
  %% call the verbatim reading of the environment
  \esk@cmds{esk@def@verbatim@handler}}
  %% clear the temp token list register alias
  \global\def\esk@@def@reg{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@def@verbatim@handler}
%    \begin{macrocode}
\def\esk@def@verbatim@handler#1{%
  %% create a local alias for the token register
  \expandafter\let\expandafter\token@reg\esk@@def@reg
  %% append the parameter to current token register
  \global\esk@@def@reg=\expandafter{\the\expandafter\token@reg\expandafter,\the#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endeskdef}
%    \begin{macrocode}
\def\endeskdef{
  %% end esk input environment
  \endesk@cmds}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\esk@@def}
%    \begin{macrocode}
%% a macro vhich takes a file name as argument to
%% globally define new macros "esk@k:f:<arg>" and
%% "esk@k:c:<arg>" which have the replacements
%% \theeskfile and \theeskfig respectively.
\def\esk@@def#1{%
  \global\e@namedef{esk@k:f:#1}{\theeskfile}%
  \global\e@namedef{esk@k:c:#1}{\theeskfig}}
%% a macro which defines a new macro with the name of the
%% argument (generated by \expandafter and \csname..,) and
%% expands the following tokens (the new macros body) due
%% to the use of \edef dynamically
\def\e@namedef#1{\expandafter\edef\csname #1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\eskuse}
%    \begin{macrocode}
\def\eskuse#1{%
  \def\esk@@def@name{esk@def:#1}%
  %% Test if the name is already registered
  \expandafter\ifcsname\esk@@def@name\endcsname
    \errmessage{Not yet implemented!}
%%   {\esk@includegraphics{\@nameuse{esk@k:f:#1}}}
  \else
    \errmessage{esk: \string\eskuse: "#1" is undefined!}
  \fi

}
%</style>
%    \end{macrocode}
% \end{macro}
%
\def\tok@newtoks{\csname newtoks\endcsname} %\newtoks not allowed in definitios since it is an \outer command
%
% \Finale
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \appendix
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Driver File}
%
%    \begin{macrocode}
%<*driver>
\documentclass[a4paper]{article}
\usepackage{doc}
\usepackage{amsmath}
%    \end{macrocode}
% The \MF{} and \MP{} logos come out much nicer if you have |mflogo|
% installed:
%    \begin{macrocode}
\IfFileExists{mflogo.sty}%
  {\usepackage{mflogo}%
   \def\FMF{\texttt{feyn}\textlogo{MF}}%
   \def\ESK{\textlogo{ESK}}}%
  {\def\MF{\textsf{META}\-\textsf{FONT}}%
   \def\MP{\textsf{META}\-\textsf{POST}}%
   \def\FMF{\texttt{feyn}\textsf{MF}}%
   \def\ESK{\textsf{ESK}}}
%    \end{macrocode}
% Protect against certain obsolete versions of the |graphics| package:
%    \begin{macrocode}
\usepackage{graphics}[1994/12/15]
\usepackage{esk}
%    \end{macrocode}
%    \begin{macrocode}
\setlength{\parindent}{0pt}
\def\manindex#1{\SortIndex{#1}{#1}}
%<manual>\OnlyDescription
\EnableCrossrefs
\RecordChanges
\CodelineIndex
\DoNotIndex{\def,\gdef,\long,\let,\begin,\end,\if,\ifx,\else,\fi}
\DoNotIndex{\immediate,\write,\newwrite,\openout,\closeout,\typeout}
\DoNotIndex{\font,\jobname,\documentclass,\char,\catcode,\ }
\DoNotIndex{\CodelineIndex,\DocInput,\DoNotIndex,\EnableCrossrefs}
\DoNotIndex{\filedate,\filename,\fileversion,\logo,\manfnt}
\DoNotIndex{\NeedsTeXFormat,\ProvidesPackage,\RecordChanges,\space}
\DoNotIndex{\begingroup,\csname,\edef,\endcsname,\expandafter}
\DoNotIndex{\usepackage,\@ifundefined,\ignorespaces,\item,\leavevmode}
\DoNotIndex{\newcounter,\newif,\par,\parindent}
\DoNotIndex{\relax,\setcounter,\stepcounter,\the,\advance}
\DoNotIndex{\CurrentOption,\DeclareOption,\documentstyle}
\DoNotIndex{\endgroup,\global,\hfuzz,\LaTeX,\LaTeXe}
\DoNotIndex{\macrocode,\OnlyDescription,\PassOptionsToPackage}
\DoNotIndex{\ProcessOptions,\RequirePackage,\string,\textsf,\unitlength}
\DoNotIndex{\@bsphack,\@esphack,\@nameuse,\@ne,\active,\do,\dospecials}
\DoNotIndex{\errhelp,\errmessage,\ifcase,\IfFileExists,\includegraphics}
\DoNotIndex{\manindex,\SortIndex,\newcommand,\newtoks,\or,\origmacrocode}
\DoNotIndex{\alpha,\displaystyle,\frac,\sin,\texttt}
%    \end{macrocode}
% Cut the line breaking some slack for macro code which might contain
% long lines (it doesn't really hurt if they stick out a bit).
%    \begin{macrocode}
\let\origmacrocode\macrocode
\def\macrocode{\hfuzz 5em\origmacrocode}
\begin{document}
  \DocInput{esk.dtx}
\end{document}
%</driver>
%    \end{macrocode}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\endinput
Local Variables:
mode:LaTeX
fill-prefix:"% "
indent-tabs-mode:nil
change-log-default-name:"TODO"
page-delimiter:"^% %%%%%%%%%*\n"
End:
